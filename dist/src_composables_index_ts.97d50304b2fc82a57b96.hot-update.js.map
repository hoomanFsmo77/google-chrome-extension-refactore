{"version":3,"file":"src_composables_index_ts.97d50304b2fc82a57b96.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAkC;AAEJ;AAGvB,IAAME,YAAY,GAACF,kDAAW,CAAC,MAAM,EAAC;EACzCG,KAAK,EAAC;IACF,OAAO;MACHC,WAAW,EAAC,KAAK;MACjBC,cAAc,EAAC;KAClB;EACL,CAAC;EACDC,OAAO,EAAC;IACJC,cAAc,0BAACJ,KAAK;MAChB,OAAOA,KAAK,CAACC,WAAW;IAC5B;GACH;EACDI,OAAO,EAAC;IACEC,aAAa,yBAACC,SAAmB;;;;;;cACnC,IAAI,CAACL,cAAc,GAAC,IAAI;;;;cAET,WAAMJ,8CAAM,CAACU,gEAA8B,EAAC;gBACnDG,MAAM,EAAC,MAAM;gBACbC,IAAI,EAACC,IAAI,CAACC,SAAS,CAAC;kBAChBC,KAAK,EAACR,SAAS,CAACQ,KAAK;kBACrBC,QAAQ,EAACT,SAAS,CAACS;iBACtB;eACJ,CAAC;;cANIC,IAAI,GAACC,SAMT;cACFC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,IAAI,CAAC;;;;cAGtBF,OAAO,CAACC,GAAG,CAACE,KAAG,CAAC;;;cAEhB,IAAI,CAACpB,cAAc,GAAC,KAAK;;;;;;;;;CAiBxC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDsC;AACjC,IAAIqB,QAAQ,GAAC,CAAC,SAAS,EAAC,UAAU,EAAC,QAAQ,EAAC,aAAa,EAAC,QAAQ,EAAC,SAAS,EAAC,QAAQ,EAAC,UAAU,EAAC,UAAU,EAAC,WAAW,EAAC,MAAM,EAAC,aAAa,EAAC,UAAU,EAAC,YAAY,EAAC,KAAK,EAAC,QAAQ,CAAC;AAEpL,IAAMC,UAAU,GAAC,+DAA+D;AAChF,IAAMC,aAAa,GAAC,iCAAiC;AAErD,IAAMC,eAAe,GAAmB,SAAlCA,eAAe,CAAoBT,IAAI,EAAEF,KAAK;EACvD,OAAQE,IAAI,CAACU,IAAI,CAAC,cAAI;IAClB,OAAOC,IAAI,CAAC,CAAC,CAAC,CAACb,KAAK,KAAGA,KAAK,CAACc,IAAI,EAAE;EACvC,CAAC,CAAC;AACN,CAAC;AAEM,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAUf,KAAY;EAAA;;;;;;UAE1B,WAAMjB,+IAAM,CAACU,gEAA8B,CAAC;;UAAjDS,IAAI,GAACC,SAA4C;UACtD,WAAQQ,eAAe,CAACK,MAAM,CAACC,OAAO,CAACf,IAAI,CAAC,EAACF,KAAK,CAAC;;;UAEpD,WAAQ,KAAK;;;;;;CAEpB","sources":["webpack://template/./src/store/user.ts","webpack://template/./src/utils/Helper.ts"],"sourcesContent":["import {defineStore} from \"pinia\";\r\nimport {User_Store,User_Info} from \"src/utils/Types\";\r\nimport {ofetch} from \"ofetch\";\r\nimport {emailValidation} from \"../utils/Helper\";\r\n\r\nexport const useUserStore=defineStore('user',{\r\n    state:():User_Store=>{\r\n        return {\r\n            loginStatus:false,\r\n            loginFetchFlag:false\r\n        }\r\n    },\r\n    getters:{\r\n        getLoginStatus(state){\r\n            return state.loginStatus\r\n        }\r\n    },\r\n    actions:{\r\n        async triggerSignUp(user_info:User_Info){\r\n            this.loginFetchFlag=true\r\n            try {\r\n                const data=await ofetch(process.env.USER_URL as string,{\r\n                    method:'POST',\r\n                    body:JSON.stringify({\r\n                        email:user_info.email,\r\n                        password:user_info.password\r\n                    })\r\n                })\r\n                console.log(data.name)\r\n\r\n            }catch (err) {\r\n                console.log(err)\r\n            }finally {\r\n                this.loginFetchFlag=false\r\n            }\r\n\r\n        },\r\n        // async checkEmail(email:string){\r\n        //     try {\r\n        //         const data=await ofetch(process.env.USER_URL as string)\r\n        //         const isValid=emailValidation(Object.entries(data),email)\r\n        //         return !isValid\r\n        //     }catch (err) {\r\n        //         console.log(err)\r\n        //     }\r\n        // }\r\n    }\r\n\r\n\r\n\r\n})","import {EmailValidation} from \"./Types\";\r\nimport {ofetch} from \"ofetch/dist/node\";\r\nexport let favCoins=['bitcoin','ethereum','tether','binancecoin','ripple','cardano','solana','dogecoin','polkadot','shiba-inu','tron','avalanche-2','litecoin','bittorrent','neo','fantom']\r\n\r\nexport const emailRegex=/^([^\\W])([A-Za-z0-9\\.\\_]+)\\@([a-zA-Z]{4,6})\\.([a-zA-Z]{2,3})$/\r\nexport const passwordRegex=/^([0-9A-Za-z\\#\\$\\@\\*\\!]{8,16})$/\r\n\r\nexport const emailValidation:EmailValidation = (data, email):boolean => {\r\n    return  data.some(user=>{\r\n        return user[1].email===email.trim()\r\n    })\r\n}\r\n\r\nexport const checkEmail = async (email:string):Promise<boolean> => {\r\n    try {\r\n        const data=await ofetch(process.env.USER_URL as string)\r\n         return  emailValidation(Object.entries(data),email)\r\n    }catch (err) {\r\n        return  false\r\n    }\r\n}"],"names":["defineStore","ofetch","useUserStore","state","loginStatus","loginFetchFlag","getters","getLoginStatus","actions","triggerSignUp","user_info","process","env","USER_URL","method","body","JSON","stringify","email","password","data","_a","console","log","name","err_1","favCoins","emailRegex","passwordRegex","emailValidation","some","user","trim","checkEmail","Object","entries"],"sourceRoot":""}